Using Generic template is a helpful way to give the user the ability to customise email text. PT_WF_NOTIFICATION is the app package
that contains all the classes you need to do this. This method also provides muti-language support. As Generic templates are not managed
objects, you will need to write Data Mover Scripts to copy these across to other instances.

By setting up Generic templates from PIA and using Notification classes along with it , an email notification can be triggered in
PeopleSoft that also in multiple languages.We can add as many bind variable as we want within the message text which we will be pushing
through the PeopleCode using an array.

We will be using PT_WF_NOTIFICATION package and Notification Template class to specify a Generic Template.

Sending Email - PeopleCode
***************************************************************************************************************************************
/* import the delivered Notification package */
import PT_WF_NOTIFICATION:*;
 
Local array of string &aBindVariables; /* variable for array */
Local array of PT_WF_NOTIFICATION:NotificationAddress &oNotifyTo;
Local PT_WF_NOTIFICATION:NotificationAddress &oNotifyAddr;
Local PT_WF_NOTIFICATION:Notification &oNotif;
 
/* Create an array of to-email ids for the Notification class */
&oNotifyTo = CreateArrayRept(&oNotifyAddr, 0);
&sToEmail = "xxxxxxxx@gmail.com"; /* Receiver's Email */
 
/* NotificationAddress(Oprid(Receiver), Description, Language, to-email-id, Channel) */
&oNotifyAddr = create PT_WF_NOTIFICATION:NotificationAddress("", "", "", &sToEmail, "Email");
&oNotifyTo.Push(&oNotifyAddr);
 
/* instantiate the NotificationTemplate class */
/* NotificationTemplate(component-name, component-market, Generic-template-name, G = Generic Teplate) */
&oGenericTemplate = create PT_WF_NOTIFICATION:NotificationTemplate("", "", "R9_EMAIL_TEST", "G");
 
/* create an array of all bind variables */
&aBindVariables = CreateArrayRept("", 0);
&aBindVariables.Push("John Smith"); /* Pushing bind variable for the generic template */
&aBindVariables.Push("Rakesh");
 
/* use the array of bind variables to populate the generic template */
&xmlVars = &oGenericTemplate.SetupGenericVars(&aBindVariables);
&oGenericTemplate.GetAndExpandTemplate(%Language, &xmlVars);
 
/* instantiate the Notification class */
/* Notification(Notify-from-email-id, date-time, language) */
&oNotif = create PT_WF_NOTIFICATION:Notification("ps@psoftsearch.com", %Date + %PerfTime, %Language);
 
/* set properties */
&oNotif.ContentType = "Content-type: text/html; charset=US-ASCII";
&oNotif.NotifyTo = &oNotifyTo;
&oNotif.EmailReplyTo = "ps@psoftsearch.com"; /* sender defined in Generic template */
&oNotif.Subject = &oGenericTemplate.Subject; /*Subject defined in Generic template */
&oNotif.Message = &oGenericTemplate.Text; /* Message text defined in Generic template */
 
/* send email */
&oNotif.Send();
***************************************************************************************************************************************

NOTE: 
1. The NotifyFrom doesn't work correctly because it seems to be a bug in the Notification class. So instead 'EmailReplyTo' property has 
been used through which the system consider the sender's email.

2.If you want a dynamic table or something similar, you can generate it as shown here and append it to the Message property.
Defining the table -
&sMailLine2 = "<br><table border='1'><tr bgcolor = '#AAAA00' ><th>Name</th><th>State</th><th>Country</th></tr><tr><td>RojerAlex</td>
<td>VA</td><td>USA</td></tr></table><br>";

Appending with Message Property(for the example given above)-
&oNotif.Message = &oGenericTemplate.Text |&sMailLine2; /* Message text defined in Generic template */

***************************************************************************************************************************************
We can use the FileNames and FileTitles properties for sending attachments â€“ both accept arrays.
FileNames will have the absolute path of the file(s) to be attached.
FileTitles will have the name(s) with which these attachment(s) would be shown in the email.

Please add the following code before &oNotif.Send().

/* Code to send Attachment along with generic template */
Local array of string &aFileNames = CreateArrayRept("", 0);
Local array of string &aFileTitles = CreateArrayRept("", 0);
 
   /* Attachments */
   &sAbsFileName = "absolute/file/path/filename.pdf";
   &aFileNames.Push(&sAbsFileName);
   &aFileTitles.Push("file-name-appering-in-email.pdf");
   &oNotif.FileTitles = &aFileTitles;
   &oNotif.FileNames = &aFileNames;
 
